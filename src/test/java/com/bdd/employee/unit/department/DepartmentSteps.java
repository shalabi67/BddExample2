package com.bdd.employee.unit.department;
/*
import com.bdd.employee.departments.Department;
import com.bdd.employee.facade.DepartmentSystem;
import cucumber.api.PendingException;
import cucumber.api.java.en.Given;
import cucumber.api.java.en.Then;
import cucumber.api.java.en.When;
import cucumber.api.junit.Cucumber;
import org.junit.Assert;
import org.junit.runner.RunWith;

@RunWith(Cucumber.class)
public class DepartmentSteps {
    private DepartmentSystem departmentSystem;
    private Department department;

    @Given("^departments system is started$")
    public void departments_system_is_started() throws Throwable {
        departmentSystem = new com.bdd.employee.unit.department.DepartmentSystem();
    }

    @When("^user provides valid department name (.+)$")
    public void user_provides_department_name(String departmentname) throws Throwable {
        department = new Department();
        department.setDepartmentName(departmentname);
    }

    @When("^user provides department name which exists in the system (.+)$")
    public void user_provides_department_name_which_exists_in_the_system(String departmentname) throws Throwable {
        throw new PendingException();
    }

    @When("^user provides department name which is invalid (.+)$")
    public void user_provides_department_name_which_is_invalid(String departmentname) throws Throwable {
        throw new PendingException();
    }

    @Then("^system creates department and provide an auto increment department id$")
    public void system_creates_department_and_provide_an_auto_increment_department_id() throws Throwable {
        Department department = departmentSystem.createDepartment(this.department);

        Assert.assertEquals(departmentSystem.getAutoGeneratedId(), department.getDepartmentId());
        Assert.assertEquals(this.department.getDepartmentName(), department.getDepartmentName());
    }

    @Then("^system returns an error department exists$")
    public void system_returns_an_error_department_exists() throws Throwable {
        throw new PendingException();
    }

    @Then("^system returns an error invalid department name$")
    public void system_returns_an_error_invalid_department_name() throws Throwable {
        throw new PendingException();
    }

}
*/
