package com.bdd.employee.unit.employee;

import com.bdd.employee.employees.*;
import com.bdd.employee.events.EmployeeSender;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.stubbing.Answer;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.HashMap;
import java.util.Map;

import static org.mockito.ArgumentMatchers.any;

public class EmployeeSystem extends com.bdd.employee.facade.EmployeeSystem {
    @Mock
    private EmployeeRepository employeeRepository;

    @Mock
    private EmployeeSender employeeSender;

    private EmployeeController employeeController;

    private Map<String, Employee> emailEmployeeMap = new HashMap<>();

    private long autoGenerateId = 0;

    public EmployeeSystem() {
        employeeRepository = Mockito.mock(EmployeeRepository.class);
        Mockito.when(employeeRepository.save(any())).then(employeeCreateAnswer);

        EmployeeService employeeService = new EmployeeService(employeeRepository, employeeSender);
        employeeController = new EmployeeController(employeeService);
    }
    @Override
    public Result<Employee> createEmployee(Employee employee) {
        ResponseEntity responseEntity = employeeController.addEmployee(employee);

       return getResult(responseEntity);
    }

    @Override
    public Long getAutoGeneratedId() {
        return autoGenerateId;
    }

    private Answer<Employee> employeeCreateAnswer = new Answer<Employee>() {
        @Override
        public Employee answer(InvocationOnMock invocationOnMock) throws Throwable {
            Employee employee = invocationOnMock.getArgument(0);
            if(emailEmployeeMap.containsKey(employee.getEmail())) {
                throw new DataIntegrityViolationException("email error");
            }
            Employee newEmployee = copyEmployee(employee);
            autoGenerateId++;
            newEmployee.setUuid(autoGenerateId);
            emailEmployeeMap.put(employee.getEmail(), newEmployee);
            return newEmployee;
        }
    };

    private Employee copyEmployee(Employee employee) {
        Employee newEmployee = new Employee();
        newEmployee.setBirthday(employee.getBirthday());
        newEmployee.setDepartment(employee.getDepartment());
        newEmployee.setEmail(employee.getEmail());
        newEmployee.setFirstName(employee.getFirstName());
        newEmployee.setLastName(employee.getLastName());

        return newEmployee;
    }

    private Result<Employee> getResult(ResponseEntity responseEntity) {
        if(responseEntity.getStatusCode() == HttpStatus.CREATED) {
            return new Result<>((Employee)responseEntity.getBody());
        } else if(responseEntity.getStatusCode() == HttpStatus.CONFLICT) {
            return new Result<>(ErrorEnum.EmailExists, (String)responseEntity.getBody());
        }else if(responseEntity.getStatusCode() == HttpStatus.EXPECTATION_FAILED) {
            return new Result<>(ErrorEnum.InvalidDate, (String)responseEntity.getBody());
        }else if(responseEntity.getStatusCode() == HttpStatus.PRECONDITION_FAILED) {
            return new Result<>(ErrorEnum.InvalidEmail, (String)responseEntity.getBody());
        }else if(responseEntity.getStatusCode() == HttpStatus.BAD_REQUEST) {
            return new Result<>(ErrorEnum.Error, (String)responseEntity.getBody());
        }

        throw new RuntimeException("Invalid result");


    }


}
