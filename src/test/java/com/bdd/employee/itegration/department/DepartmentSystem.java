package com.bdd.employee.itegration.department;

import com.bdd.employee.configurations.SecurityConfiguration;
import com.bdd.employee.departments.Department;
import com.bdd.employee.departments.DepartmentController;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.util.Base64Utils;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

public class DepartmentSystem extends com.bdd.employee.facade.DepartmentSystem {
    private MockMvc mockMvc;

    public DepartmentSystem(MockMvc mockMvc) {
        this.mockMvc = mockMvc;
    }

    @Override
    public Department createDepartment(Department department) throws Exception {
        MvcResult mvcResult = this.mockMvc
                .perform(
                        post(DepartmentController.URL)
                        .header(HttpHeaders.AUTHORIZATION,
                                "Basic " + Base64Utils.encodeToString((SecurityConfiguration.ADMIN_USER + ":" + SecurityConfiguration.ADMIN_PASSWORD).getBytes()))
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(departmentToString(department))
                        .accept(MediaType.APPLICATION_JSON)
                )
                .andExpect(status().isCreated())
                .andExpect(MockMvcResultMatchers.jsonPath("$.departmentName").value(department.getDepartmentName()))
                .andReturn();

        String content = mvcResult.getResponse().getContentAsString();
        return stringToDepartment(content);
    }

    private String departmentToString(Department department) {
        ObjectMapper objectMapper = new ObjectMapper();
        try {
            String json = objectMapper.writeValueAsString(department);
            return json;
        } catch (JsonProcessingException e) {
            e.printStackTrace();
            return null;
        }
    }
    private Department stringToDepartment(String  content) {
        ObjectMapper objectMapper = new ObjectMapper();
        try {
            Department department = objectMapper.readValue(content, Department.class);
            return department;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    @Override
    public Long getAutoGeneratedId() {
        return null;
    }
}
